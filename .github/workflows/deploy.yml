name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      build_client:
        description: "Build and deploy client"
        type: boolean
        default: true
        required: true
      build_server:
        description: "Build and deploy server"
        type: boolean
        default: true
        required: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build client image
      - name: Build client image
        if: ${{ inputs.build_client }}
        uses: docker/build-push-action@v4
        with:
          context: ./client
          load: true
          tags: xmrchat-client:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=./client/client-image.tar

      # Build server image
      - name: Build server image
        if: ${{ inputs.build_server }}
        uses: docker/build-push-action@v4
        with:
          context: ./server
          load: true
          tags: xmrchat-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=./server/server-image.tar

      # Deploy to server
      - name: Deploy to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          source: |
            ${{ inputs.build_client && 'client/client-image.tar' || '' }}
            ${{ inputs.build_server && 'server/server-image.tar' || '' }}
          target: "/tmp"
          strip_components: 0

      - name: Execute remote commands
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            #!/bin/bash
            set -e

            if [ "${{ inputs.build_client }}" = "true" ]; then
              echo "Loading and deploying client..."
              docker load < /tmp/client-image.tar
              cd /directory/xmrchat-dev/client
              docker-compose up -d
            fi

            if [ "${{ inputs.build_server }}" = "true" ]; then
              echo "Loading and deploying server..."
              docker load < /tmp/server-image.tar
              cd /directory/xmrchat-dev/server
              docker-compose up -d
            fi
